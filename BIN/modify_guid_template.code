// Purpose of this code: 
// The guid value will be modified in a random way when this is run on the client.
// Only the client has the id.
// The server may run the same routine, even though it only has a hash of the id.
//
// guid - the client generated random GUID
// id - the client generated id - which is stored in the encrypted Config file
void main(barray guid, barray id)
{
	modify_guid(guid, id);
}

// guid - generated by the client for each communication
// id - geneated one time my the client, known only to the client
void modify_guid(barray guid, barray id)
{
	barray hashed_id;
	hash_program_id(hashed_id, id);

	uint32 seed, e0, e1;
	seed = #SEED#; // Generated by the SERVER  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	
	// Note: the server knows the hashed id value
	MurmurHash3_x86_32(hashed_id,seed,e0);
	MurmurHash3_x86_32(hashed_id,e0,e1);
	
	barray tmp;
	barray_append_uint32(tmp,e0);
	barray_append_uint32(tmp,e1);
	
	uint64 ev;
	uint32 offset, nbytes;
	nbytes = 8;
	uint64_array_assign_u8(ev,tmp,offset,nbytes);

	// Note: the server knows the value of the hashed_id and therefore the expected value ev <<<<<<<<<<<<<<<<<<<<<<<<<
	modify_guid_low_level(guid, ev); //EV(ev,#EV#)
}

void modify_guid_low_level(barray guid, uint64 ev) 
{
	barray key;  // generated by the server one time, embedded in code here
	
	int reverse_byte_order; 
	reverse_byte_order = 0;
	STRING s;
	s = "#KEY#"; // This random 16 byte binary hex representation is automatically generated by the SERVER <<<<<<<<<<<<<<<<<<<
	barray_append_hex_string(key,s,reverse_byte_order);
	
	uint32 iter, seed;
	
	int ipos,count;
	ipos = 16;
	count = 16;
	barray_insert(key,guid,ipos,count);
	
	uint32 v0, v1, shift_down, pattern;
	
	pattern = 0xC;

	while (iter >= 0)
	{
		MurmurHash3_x64_128(key,seed,guid);
		
		uint32 pos, n;
		pos = 0;
		n = 4;
		uint32_array_assign_u8(seed,guid,pos,n);
		
		shift_down = 30;
		v0 = seed >> shift_down;
		
		v1 = seed & pattern;
		shift_down = 2;
		v1 = v1 >> shift_down;
		
		iter = iter + 1;
		
		if (v0 == v1)
		{
			break;
		}
	}
}
